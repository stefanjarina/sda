defaultNetwork: simple-docker-apps
defaultPassword: Start123++
prefix: sda
services:
  - name: mssql
    outputName: MS SQL
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P '{{.PASSWORD}}'
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: mcr.microsoft.com/mssql/server
      isPersistent: true
      envVars:
        - ACCEPT_EULA=Y
        - SA_PASSWORD={{.PASSWORD}}
        - MSSQL_PID=Developer
      additionalDockerArguments:
        - --ulimit nofile=262144:262144
      customAppCommands: []
      portMappings:
        - host: 1433
          container: 1433
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/opt/mssql
          isNamed: true
  - name: postgres
    outputName: PostgreSQL
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: psql 'postgresql://postgres:{{.PASSWORD}}@localhost:5432'
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: postgres
      isPersistent: true
      envVars:
        - POSTGRES_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 5432
          container: 5432
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/postgresql/data
          isNamed: true
  - name: mariadb
    outputName: MariaDB
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: mysql -uroot -p'{{.PASSWORD}}'
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: mariadb
      isPersistent: true
      envVars:
        - MARIADB_ROOT_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 3306
          container: 3306
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/mysql
          isNamed: true
  - name: mysql
    outputName: MySQL
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: mysql -uroot -p'{{.PASSWORD}}'
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: mysql
      isPersistent: true
      envVars:
        - MYSQL_ROOT_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 3306
          container: 3306
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/mysql
          isNamed: true
  - name: mongodb
    outputName: MongoDB
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: mongo -u admin -p {{.PASSWORD}}
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: mongo
      isPersistent: true
      envVars:
        - MONGO_INITDB_ROOT_USERNAME=admin
        - MONGO_INITDB_ROOT_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 27017
          container: 27017
      volumes:
        - source: '{{.NAME}}-data'
          target: /data/db
          isNamed: true
  - name: redis
    outputName: Redis
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: redis-cli
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: redis
      isPersistent: false
      volumes: []
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 6379
          container: 6379
  - name: redispersistent
    outputName: Redis Persistent
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: redis-cli
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: redis
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands:
        - --appendonly yes
      portMappings:
        - host: 6379
          container: 6379
      volumes:
        - source: '{{.NAME}}-data'
          target: /data
          isNamed: true
  - name: cassandra
    outputName: Cassandra
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: cqlsh
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: cassandra
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 9042
          container: 9042
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/cassandra
          isNamed: true
  - name: ravendb
    outputName: Ravendb
    defaultVersion: ubuntu-latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: ./rvn admin-channel
    hasWebConnect: true
    webConnectUrl: http://localhost:8080
    docker:
      imageName: ravendb/ravendb
      isPersistent: true
      envVars:
        - RAVEN_ARGS=--log-to-console
        - RAVEN_Setup_Mode=None
        - RAVEN_License_Eula_Accepted=true
        - RAVEN_Security_UnsecuredAccessAllowed=PrivateNetwork
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8080
          container: 8080
        - host: 38888
          container: 38888
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/ravendb/data
          isNamed: true
        - source: '{{.NAME}}-config'
          target: /opt/RavenDB/config
          isNamed: true
  - name: clickhouse
    outputName: Clickhouse
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: clickhouse-client
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: yandex/clickhouse-server
      isPersistent: true
      envVars: []
      additionalDockerArguments:
        - --ulimit nofile=262144:262144
      customAppCommands: []
      portMappings:
        - host: 8123
          container: 8123
        - host: 9000
          container: 9000
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/clickhouse
          isNamed: true
  - name: dremio
    outputName: Dremio
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: true
    webConnectUrl: http://localhost:9047
    docker:
      imageName: dremio/dremio-oss
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 9047
          container: 9047
        - host: 31010
          container: 31010
        - host: 45678
          container: 45678
      volumes:
        - source: '{{.NAME}}-data'
          target: /opt/dremio/data
          isNamed: true
        - source: '{{.NAME}}-config'
          target: /opt/dremio/conf
          isNamed: true
  - name: dynamodb
    outputName: Dynamodb
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: amazon/dynamodb-local
      isPersistent: false
      volumes: []
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8000
          container: 8000
  - name: elasticsearch
    outputName: Elasticsearch
    defaultVersion: 8.13.4
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: bin/elasticsearch-sql-cli
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: elasticsearch
      isPersistent: true
      envVars:
        - discovery.type=single-node
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 9200
          container: 9200
        - host: 9300
          container: 9300
      volumes:
        - source: '{{.NAME}}-data'
          target: /usr/share/elasticsearch/data
          isNamed: true
  - name: solr
    outputName: Solr
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: true
    webConnectUrl: http://localhost:8983/solr/
    docker:
      imageName: solr
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8983
          container: 8983
      volumes:
        - source: '{{.NAME}}-data'
          target: /opt/solr/server/solr/mycores
          isNamed: true
  - name: neo4j
    outputName: Neo4j
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: cypher-shell -u neo4j -p neo4j
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: neo4j
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 7474
          container: 7474
        - host: 7687
          container: 7687
      volumes:
        - source: '{{.NAME}}-data'
          target: /data
          isNamed: true
  - name: orientdb
    outputName: OrientDB
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: bin/console.sh
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: orientdb
      isPersistent: true
      envVars:
        - ORIENTDB_ROOT_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 2424
          container: 2424
        - host: 2480
          container: 2480
      volumes:
        - source: '{{.NAME}}-data'
          target: /orientdb/databases
          isNamed: true
  - name: arangodb
    outputName: ArangoDB
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: arangosh --server.password {{.PASSWORD}}
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: arangodb
      isPersistent: true
      envVars:
        - ARANGO_ROOT_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8529
          container: 8529
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/arangodb3
          isNamed: true
        - source: '{{.NAME}}-apps'
          target: /var/lib/arangodb3-apps
          isNamed: true
  - name: rethinkdb
    outputName: RethinkDB
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: true
    webConnectUrl: http://localhost:8080
    docker:
      imageName: rethinkdb
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8080
          container: 8080
      volumes:
        - source: '{{.NAME}}-data'
          target: /data
          isNamed: true
  - name: presto
    outputName: Presto
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: presto-cli
    hasWebConnect: true
    webConnectUrl: http://localhost:8080
    docker:
      imageName: prestodb/presto
      isPersistent: false
      volumes: []
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8080
          container: 8080
  - name: scylladb
    outputName: ScyllaDB
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: cqlsh
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: scylladb/scylla
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 9042
          container: 9042
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/lib/scylla
          isNamed: true
  - name: firebird
    outputName: Firebird
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: /usr/local/firebird/bin/isql -user sysdba -password {{.PASSWORD}}
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: jacobalberty/firebird
      isPersistent: true
      envVars:
        - ISC_PASSWORD={{.PASSWORD}}
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 3050
          container: 3050
      volumes:
        - source: '{{.NAME}}-data'
          target: /firebird
          isNamed: true
  - name: vertica
    outputName: Vertica
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: /opt/vertica/bin/vsql
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: vertica/vertica-ce
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 5433
          container: 5433
        - host: 5444
          container: 5444
      volumes:
        - source: '{{.NAME}}-data'
          target: /data
          isNamed: true
  - name: crate
    outputName: Crate
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: crash
    hasWebConnect: true
    webConnectUrl: http://localhost:4200
    docker:
      imageName: crate
      isPersistent: true
      envVars:
        - CRATE_HEAP_SIZE=2g
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 4200
          container: 4200
        - host: 5432
          container: 5432
      volumes:
        - source: '{{.NAME}}-data'
          target: /data
          isNamed: true
  - name: couchbase
    outputName: Couchbase
    defaultVersion: community
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: cbq --user Administrator --password {{.PASSWORD}}
    hasWebConnect: true
    webConnectUrl: http://localhost:8091
    docker:
      imageName: couchbase
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8091
          container: 8091
        - host: 8092
          container: 8092
        - host: 8093
          container: 8093
        - host: 8094
          container: 8094
        - host: 8095
          container: 8095
        - host: 8096
          container: 8096
        - host: 8097
          container: 8097
        - host: 9123
          container: 9123
        - host: 11207
          container: 11207
        - host: 11210
          container: 11210
        - host: 11280
          container: 11280
        - host: 18091
          container: 18091
        - host: 18092
          container: 18092
        - host: 18093
          container: 18093
        - host: 18094
          container: 18094
        - host: 18095
          container: 18095
        - host: 18096
          container: 18096
        - host: 18097
          container: 18097
      volumes:
        - source: '{{.NAME}}-data'
          target: /opt/couchbase/var
          isNamed: true
  - name: marklogic
    outputName: MarkLogic Server
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: true
    webConnectUrl: http://localhost:8001
    docker:
      imageName: marklogicdb/marklogic-db
      isPersistent: true
      envVars:
        - MARKLOGIC_INIT=true
        - MARKLOGIC_ADMIN_USERNAME=admin
        - MARKLOGIC_ADMIN_PASSWORD={{.PASSWORD}}
        - MARKLOGIC_WALLET_PASSWORD={{.PASSWORD}}
        - REALM=public
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 8000
          container: 8000
        - host: 8001
          container: 8001
        - host: 8002
          container: 8002
      volumes:
        - source: '{{.NAME}}-data'
          target: /var/opt/MarkLogic
          isNamed: true
  - name: aerospike
    outputName: Aerospike
    defaultVersion: ce-7.1.0.0
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: aerospike
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands: []
      portMappings:
        - host: 3000
          container: 3000
        - host: 3001
          container: 3001
        - host: 3002
          container: 3002
      volumes:
        - source: '{{.NAME}}-data'
          target: /opt/aerospike/data
          isNamed: true
        - source: '{{.NAME}}-config'
          target: /opt/aerospike/etc
          isNamed: true
  - name: surrealdb
    outputName: SurrealDB
    defaultVersion: latest
    hasPassword: true
    customPassword: ''
    hasCliConnect: true
    cliConnectCommand: '/surreal sql -u root -p {{.PASSWORD}} --pretty'
    hasWebConnect: false
    webConnectUrl: ''
    docker:
      imageName: surrealdb/surrealdb
      isPersistent: false
      envVars: []
      additionalDockerArguments: []
      customAppCommands:
        [
          'start',
          '--auth',
          '--user',
          'root',
          '--pass',
          '{{.PASSWORD}}',
          'memory',
        ]
      portMappings:
        - host: 8000
          container: 8000
      volumes: []
  - name: portainer
    outputName: Portainer
    defaultVersion: latest
    hasPassword: false
    customPassword: ''
    hasCliConnect: false
    cliConnectCommand: ''
    hasWebConnect: true
    webConnectUrl: http://localhost:9000
    docker:
      imageName: portainer/portainer
      isPersistent: true
      envVars: []
      additionalDockerArguments: []
      customAppCommands:
        - -H unix:///var/run/docker.sock
      portMappings:
        - host: 9000
          container: 9000
      volumes:
        - source: '{{.NAME}}-data'
          target: /data portainer/portainer
          isNamed: true
        - source: /var/run/docker.sock
          target: /var/run/docker.sock
          isNamed: false
